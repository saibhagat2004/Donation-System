import React, { useState } from 'react';
import toast from 'react-hot-toast';

export default function DocumentUploadForm({ onUpload, onCancel, isUploading }) {
  const [uploadMethod, setUploadMethod] = useState('file'); // 'file' or 'url'
  const [documentFile, setDocumentFile] = useState(null);
  const [documentUrl, setDocumentUrl] = useState('');
  const [documentHash, setDocumentHash] = useState('');
  const [notes, setNotes] = useState('');
  const [isUploadingToCloudinary, setIsUploadingToCloudinary] = useState(false);

  // Cloudinary configuration
  // Backend driven upload (Cloudinary done server-side). Retain direct URL path for flexibility.
  const BACKEND_BASE = import.meta.env.VITE_API_BASE || 'http://localhost:5000';

  const handleFileChange = (e) => {
    const file = e.target.files[0];
    if (file) {
      // Validate file type
      const allowedTypes = ['image/jpeg', 'image/png', 'image/jpg', 'application/pdf'];
      if (!allowedTypes.includes(file.type)) {
        toast.error('Only JPEG, PNG, and PDF files are allowed');
        return;
      }

      // Validate file size (5MB max)
      if (file.size > 5 * 1024 * 1024) {
        toast.error('File size must be less than 5MB');
        return;
      }

      setDocumentFile(file);
      // Generate a simple hash based on file properties
      const hash = generateFileHash(file);
      setDocumentHash(hash);
    }
  };

  const generateFileHash = (file) => {
    // Simple hash generation based on file properties
    const str = `${file.name}_${file.size}_${file.lastModified}`;
    let hash = 0;
    for (let i = 0; i < str.length; i++) {
      const char = str.charCodeAt(i);
      hash = ((hash << 5) - hash) + char;
      hash = hash & hash; // Convert to 32-bit integer
    }
    return Math.abs(hash).toString(16);
  };

  const uploadFileToBackend = async (file, pendingTransactionId) => {
    const formData = new FormData();
    formData.append('document', file);
    if (notes.trim()) formData.append('ngo_notes', notes.trim());
    try {
      const response = await fetch(`${BACKEND_BASE}/api/bank/upload-document-file/${pendingTransactionId}`, {
        method: 'POST',
        body: formData
      });
      if (!response.ok) {
        const errText = await response.text();
        throw new Error(`Backend upload failed: ${response.status} ${errText}`);
      }
      const data = await response.json();
      return { success: true, data };
    } catch (e) {
      console.error('Backend file upload error', e);
      return { success: false, error: e.message };
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    try {
      if (uploadMethod === 'file' && documentFile) {
        // For file uploads, pass the file to parent - URL and hash will be generated by backend
        await onUpload({
          document_url: null, // Will be generated by backend
          document_hash: null, // Will be generated by backend
          ngo_notes: notes.trim() || null,
          _file: documentFile,
          _uploadMethod: uploadMethod
        });
      } else {
        // For URL method, validate required fields
        if (!documentUrl.trim() || !documentHash.trim()) {
          toast.error('Please provide a document URL and hash');
          return;
        }

        // Validate URL format
        try {
          new URL(documentUrl);
        } catch {
          toast.error('Please provide a valid document URL');
          return;
        }

        await onUpload({
          document_url: documentUrl,
          document_hash: documentHash,
          ngo_notes: notes.trim() || null,
          _file: null,
          _uploadMethod: uploadMethod
        });
      }

    } catch (error) {
      console.error('Upload error:', error);
      toast.error('Failed to process document upload');
      setIsUploadingToCloudinary(false);
    }
  };

  const isFormValid = () => {
    if (uploadMethod === 'file') {
      return documentFile !== null;
    } else {
      return documentUrl.trim() !== '' && documentHash.trim() !== '';
    }
  };

  return (
    <div className="bg-gray-50 p-4 rounded-lg border">
      <h4 className="font-medium text-gray-900 mb-4 flex items-center">
        <svg className="w-5 h-5 mr-2 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
        </svg>
        Upload Supporting Document
      </h4>

      <form onSubmit={handleSubmit} className="space-y-4">
        {/* Upload Method Selection */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Choose Upload Method:
          </label>
          <div className="flex space-x-4">
            <label className="flex items-center">
              <input
                type="radio"
                name="uploadMethod"
                value="file"
                checked={uploadMethod === 'file'}
                onChange={(e) => setUploadMethod(e.target.value)}
                className="mr-2"
              />
              <span className="text-sm">Upload New File</span>
            </label>
            <label className="flex items-center">
              <input
                type="radio"
                name="uploadMethod"
                value="url"
                checked={uploadMethod === 'url'}
                onChange={(e) => setUploadMethod(e.target.value)}
                className="mr-2"
              />
              <span className="text-sm">Provide Existing URL</span>
            </label>
          </div>
        </div>

        {/* File Upload */}
        {uploadMethod === 'file' && (
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Document File (JPEG, PNG, PDF - Max 5MB):
            </label>
            <input
              type="file"
              accept="image/jpeg,image/jpg,image/png,application/pdf"
              onChange={handleFileChange}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              disabled={isUploading || isUploadingToCloudinary}
            />
            {documentFile && (
              <div className="mt-2 p-2 bg-blue-50 rounded">
                <p className="text-sm text-blue-800">
                  <span className="font-medium">Selected:</span> {documentFile.name}
                </p>
                <p className="text-sm text-blue-600">
                  <span className="font-medium">Size:</span> {(documentFile.size / 1024 / 1024).toFixed(2)} MB
                </p>
                <p className="text-sm text-blue-600">
                  <span className="font-medium">Generated Hash:</span> {documentHash}
                </p>
              </div>
            )}
          </div>
        )}

        {/* URL Input */}
        {uploadMethod === 'url' && (
          <>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Document URL (Cloudinary or other cloud storage):
              </label>
              <input
                type="url"
                value={documentUrl}
                onChange={(e) => setDocumentUrl(e.target.value)}
                placeholder="https://res.cloudinary.com/your-cloud/image/upload/v1234567890/documents/receipt.jpg"
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                disabled={isUploading}
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Document Hash/ID:
              </label>
              <input
                type="text"
                value={documentHash}
                onChange={(e) => setDocumentHash(e.target.value)}
                placeholder="public_id or hash of the document"
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                disabled={isUploading}
              />
            </div>
          </>
        )}

        {/* Notes */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Notes (Optional):
          </label>
          <textarea
            value={notes}
            onChange={(e) => setNotes(e.target.value)}
            placeholder="Add any notes about this expense or document..."
            rows={2}
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            disabled={isUploading || isUploadingToCloudinary}
          />
        </div>

        {/* Buttons */}
        <div className="flex space-x-3">
          <button
            type="submit"
            disabled={!isFormValid() || isUploading || isUploadingToCloudinary}
            className="flex-1 bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center gap-2"
          >
            {isUploadingToCloudinary ? (
              <>
                <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                Uploading to Cloud...
              </>
            ) : isUploading ? (
              <>
                <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                Submitting...
              </>
            ) : (
              <>
                <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
                </svg>
                Upload Document
              </>
            )}
          </button>
          <button
            type="button"
            onClick={onCancel}
            disabled={isUploading || isUploadingToCloudinary}
            className="flex-1 bg-gray-300 text-gray-700 px-4 py-2 rounded-lg hover:bg-gray-400 transition disabled:opacity-50"
          >
            Cancel
          </button>
        </div>
      </form>

      {/* Help Text */}
      <div className="mt-4 p-3 bg-blue-50 rounded-lg">
        <h5 className="text-sm font-medium text-blue-800 mb-1">Document Requirements:</h5>
        <ul className="text-xs text-blue-700 space-y-1">
          <li>• Upload receipts, invoices, or proof of purchase</li>
          <li>• Supported formats: JPEG, PNG, PDF (Max 5MB)</li>
          <li>• Documents are stored securely on Cloudinary</li>
          <li>• Document hash is recorded on blockchain for verification</li>
        </ul>
      </div>
    </div>
  );
}

// Export the component for use in NGODashboard
export { DocumentUploadForm };